===========ArchSpec===============
{package jRAPL}
final class ArchSpec
+ NUM_SOCKETS  final int 
+ NUM_STATS_PER_SOCKET  final int 
+ RAPL_WRAPAROUND  final double 
+ MICRO_ARCHITECTURE  final int 
+ MICRO_ARCHITECTURE_NAME  final String 
+ DRAM_IDX  final int 
+ GPU_IDX  final int 
+ CORE_IDX  final int 
+ PKG_IDX  final int 
+ DRAM_SUPPORTED  final boolean 
+ GPU_SUPPORTED  final boolean 
+ CORE_SUPPORTED  final boolean 
+ PKG_SUPPORTED  final boolean 
- getSocketNum()   int 
- getWraparoundEnergy() double 
- getMicroArchitectureName() String 
- getMicroArchitecture() int 
- energyStatsStringFormat() String 
+ init() void 
+ infoString() String 
==================
===========AsyncEnergyMonitorCSide===============
package jRAPL

class AsyncEnergyMonitorCSide extends AsyncEnergyMonitor

- startNative() void 
- stopNative() void 
- resetNative() void 
- activateNative(int samplingRate,int storageType,int size_parameter) void 
- deactivateNative() void 
- writeFileCSVNative(String filePath) void 
- getLastKSamplesNative(int k) String 
- longgetLastKTimestampsNative(int k) [] 
- getNumSamplesNative() int 
- setSamplingRateNative(int s) void 
- getSamplingRateNative() int 
- DYNAMIC_ARRAY_STORAGE   final int 
- LINKED_LIST_STORAGE  final int 
- samplingRate int 
- storageType int 
- initialSize  int 
+ AsyncEnergyMonitorCSide()
+ AsyncEnergyMonitorCSide(int s, String storageTypeString, int size)
+ AsyncEnergyMonitorCSide(String storageTypeString)
==================
===========AsyncEnergyMonitor===============
package jRAPL
abstract class AsyncEnergyMonitor extends EnergyMonitor
# monitorStartTime Instant  
# monitorStopTime Instant  
# isRunning boolean  
# samplingRat int e
+ getNumSamples() abstract int 
+ setSamplingRate(int s) abstract void 
+ getSamplingRate() abstract int 
+ getLifetime() Duration 
+ start() void 
+ stop() void 
+ reset() void 
+ abstract Instant[] getLastKTimestamps(int k)
+ abstract String[] getLastKSamples(int k)
+ getLastKSamples_Objects(int k) EnergyStats[] 
+ getLastKSamples_Arrays(int k) double[][] 
+ isRunning() boolean 
+ writeFileCSV(String fileName) abstract void 
+ writeFileMetadata(String fileName) void 
==================
===========AsyncEnergyMonitorJavaSide===============
package jRAPL;
AsyncEnergyMonitorJavaSide extends AsyncEnergyMonitor implements Runnable {
+ AsyncEnergyMonitorJavaSide()
+ AsyncEnergyMonitorJavaSide(int s)
- ArrayList<String> samples;
- samplingRate int ;
- exit volatile boolean ;
- t  Thread ;
}
==================
===========Demo===============
==================
===========DriverTmp===============
==================
===========DvfsEnergyController===============
DvfsEnergyController extends EnergyController {
+ scale(int freq)   int 
+ freqAvailable()   int[] 
+ SetGovernor(String gov)   void 
==================
===========EnergyController===============
package jRAPL;
public class EnergyController extends EnergyManager {
}
==================
===========EnergyDiff===============
EnergyDiff extends EnergySample
+ EnergyDiff(double[] primitiveSample, Duration elapsedTime)
- Duration elapsedTime = null;
+ setElapsedTime(Duration elapsed) void 
+ getElapsedTime() Duration 
+ csvHeader()  String 
+ between(EnergyStats before, EnergyStats after)  EnergyDiff 
==================
===========EnergyManager===============
package jRAPL
EnergyManager
- boolean active 
- boolean libraryLoaded 
- int energyManagersActive 
- void profileInit()
- void profileDealloc()
- void loadNativeLibrary()
+ void activate()
+ void deactivate()
==================
===========EnergyMonitor===============

EnergyMonitor extends EnergyManager
# energyStatCheck()  String 
- stringArrayToDoubleArray(String[] s)  double[] 
# stringToPrimitiveSample(String energyString)  double[] 
# stringToEnergyStats(String energyString)  EnergyStats 
# subtractPrimitiveSamples(double[] a, double[] b)  double[] 
==================
===========EnergySample===============
package jRAPL
+ abstract class EnergySample
{
+ EnergySample(double[] primitiveSample)
+ EnergySample(EnergySample other)
# csvHeader() static String 
# String csv()
+ getPrimitiveSample() double[] 
- primitiveSample double[] 
- getEnergy(int socket, int index) double 
+ getCore(int socket) double 
+ getCore() double 
+ getGpu(int socket) double 
+ getGpu() double 
+ getPackage(int socket) double 
+ getPackage() double 
+ getDram(int socket) double 
+ getDram() double 
}
==================
===========EnergyStats===============
package jRAPL;

EnergyStats extends EnergySample
- Instant timestamp;
+ EnergyStats(double[] primitiveSample, Instant ts)
+ EnergyStats(EnergyStats other)
+ csvHeader() String 
+ getTimestamp() Instant 
+ setTimestamp(Instant ts) void 
==================
===========NativeUtils===============
package jRAPL
NativeUtils
- MIN_PREFIX_LENGTH int  
+ String NATIVE_FOLDER_PATH_PREFIX
+ loadLibraryFromJar(String path) void 
- temporaryDir File
- NativeUtils()
- isPosixCompliant() boolean 
- createTempDirectory(String prefix) File 
==================
===========PowercapEnergyController===============
package jRAPL
PowercapEnergyController extends EnergyController {
+ GetDramPowerSpec()   double[] 
+ SetPackagePowerLimit(int socketId, int level, double costomPower)   void 
+ SetPackageTimeWindowLimit(int socketId, int level, double costomTimeWin)   void 
+ SetDramTimeWindowLimit(int socketId, int level, double costomTimeWin)   void 
+ SetDramPowerLimit(int socketId, int level, double costomPower)   void 
+ SetPowerLimit(int ENABLE)   void 
}
==================
===========SyncEnergyMonitor===============
package jRAPL;
SyncEnergyMonitor extends EnergyMonitor
+ getSample() EnergyStats 
+ getPrimitiveSample() double[] 
==================
===========Utils===============
Utils
+ usecToInstant(long usec)  Instant 
+ timestampToUsec(Instant timestamp)  long 
+ durationToUsec(Duration duration)  long 
==================
