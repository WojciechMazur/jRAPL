# JMH version: 1.27
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -DsleepTime=1
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: sleeping.Sleeping.timeCSleep

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 1135.485 us/op
# Warmup Iteration   2: 1103.185 us/op
# Warmup Iteration   3: 1128.536 us/op
# Warmup Iteration   4: 1131.625 us/op
# Warmup Iteration   5: 1138.724 us/op
Iteration   1: 1124.269 us/op
Iteration   2: 1106.360 us/op
Iteration   3: 1097.969 us/op
Iteration   4: 1115.854 us/op
Iteration   5: 1124.761 us/op
Iteration   6: 1102.942 us/op
Iteration   7: 1113.952 us/op
Iteration   8: 1141.370 us/op
Iteration   9: 1123.923 us/op
Iteration  10: 1098.091 us/op


Result "sleeping.Sleeping.timeCSleep":
  1114.949 ±(99.9%) 21.106 us/op [Average]
  (min, avg, max) = (1097.969, 1114.949, 1141.370), stdev = 13.960
  CI (99.9%): [1093.843, 1136.055] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -DsleepTime=1
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: sleeping.Sleeping.timeCSleepWithC

# Run progress: 50.00% complete, ETA 00:02:30
# Fork: 1 of 1
# Warmup Iteration   1: 1097.842 us/op
# Warmup Iteration   2: 1107.366 us/op
# Warmup Iteration   3: 1126.733 us/op
# Warmup Iteration   4: 1119.532 us/op
# Warmup Iteration   5: 1159.430 us/op
Iteration   1: 1156.021 us/op
Iteration   2: 1159.590 us/op
Iteration   3: 1133.560 us/op
Iteration   4: 1140.561 us/op
Iteration   5: 1090.688 us/op
Iteration   6: 1082.264 us/op
Iteration   7: 1086.793 us/op
Iteration   8: 1084.747 us/op
Iteration   9: 1086.931 us/op
Iteration  10: ...> C Time: 1109.000000 +/- 82.319423
1083.075 us/op


Result "sleeping.Sleeping.timeCSleepWithC":
  1110.423 ±(99.9%) 49.480 us/op [Average]
  (min, avg, max) = (1082.264, 1110.423, 1159.590), stdev = 32.728
  CI (99.9%): [1060.943, 1159.903] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                 Mode  Cnt     Score    Error  Units
Sleeping.timeCSleep       avgt   10  1114.949 ± 21.106  us/op
Sleeping.timeCSleepWithC  avgt   10  1110.423 ± 49.480  us/op
