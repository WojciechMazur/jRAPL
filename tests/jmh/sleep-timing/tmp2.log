# JMH version: 1.27
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -DsleepTime=1
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: sleeping.Sleeping.timeCSleep

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 1132.262 us/op
# Warmup Iteration   2: 1136.619 us/op
# Warmup Iteration   3: 1136.852 us/op
# Warmup Iteration   4: 1134.862 us/op
# Warmup Iteration   5: 1138.310 us/op
Iteration   1: 1135.487 us/op
Iteration   2: 1136.260 us/op
Iteration   3: 1136.023 us/op
Iteration   4: 1127.855 us/op
Iteration   5: 1124.192 us/op
Iteration   6: 1130.338 us/op
Iteration   7: 1127.389 us/op
Iteration   8: 1129.455 us/op
Iteration   9: 1112.158 us/op
Iteration  10: 1118.572 us/op


Result "sleeping.Sleeping.timeCSleep":
  1127.773 ±(99.9%) 11.824 us/op [Average]
  (min, avg, max) = (1112.158, 1127.773, 1136.260), stdev = 7.821
  CI (99.9%): [1115.949, 1139.597] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -DsleepTime=1
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: sleeping.Sleeping.timeCSleepWithC

# Run progress: 50.00% complete, ETA 00:02:30
# Fork: 1 of 1
# Warmup Iteration   1: 1106.906 us/op
# Warmup Iteration   2: 1105.787 us/op
# Warmup Iteration   3: 1110.848 us/op
# Warmup Iteration   4: 1124.807 us/op
# Warmup Iteration   5: 1135.603 us/op
Iteration   1: 1133.265 us/op
Iteration   2: 1135.756 us/op
Iteration   3: 1127.945 us/op
Iteration   4: 1120.970 us/op
Iteration   5: 1118.287 us/op
Iteration   6: 1125.224 us/op
Iteration   7: 1112.836 us/op
Iteration   8: 1128.888 us/op
Iteration   9: 1122.780 us/op
Iteration  10: ...> C Time: 1118.000000 +/- 131.190568
1120.617 us/op


Result "sleeping.Sleeping.timeCSleepWithC":
  1124.657 ±(99.9%) 10.572 us/op [Average]
  (min, avg, max) = (1112.836, 1124.657, 1135.756), stdev = 6.992
  CI (99.9%): [1114.085, 1135.228] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                 Mode  Cnt     Score    Error  Units
Sleeping.timeCSleep       avgt   10  1127.773 ± 11.824  us/op
Sleeping.timeCSleepWithC  avgt   10  1124.657 ± 10.572  us/op
