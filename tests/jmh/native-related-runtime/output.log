WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for jRAPL:native-related-runtime:jar:1.0
[WARNING] 'dependencies.dependency.systemPath' for jRAPL:jRAPL:jar should not point at files within the project directory, ${project.basedir}/../../../src/java/target/jRAPL-1.0.jar will be unresolvable by dependent projects @ line 69, column 38
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: jRAPL:jRAPL:jar -> duplicate declaration of version 1.0 @ line 65, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building JMH benchmark sample: Java 1.0
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ native-related-runtime ---
[INFO] Deleting /home/alejandro/jRAPL/tests/jmh/native-related-runtime/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ native-related-runtime ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/alejandro/jRAPL/tests/jmh/native-related-runtime/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ native-related-runtime ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 5 source files to /home/alejandro/jRAPL/tests/jmh/native-related-runtime/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ native-related-runtime ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/alejandro/jRAPL/tests/jmh/native-related-runtime/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ native-related-runtime ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.17:test (default-test) @ native-related-runtime ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ native-related-runtime ---
[INFO] Building jar: /home/alejandro/jRAPL/tests/jmh/native-related-runtime/target/native-related-runtime-1.0.jar
[INFO] 
[INFO] --- maven-shade-plugin:3.2.1:shade (default) @ native-related-runtime ---
[INFO] Including org.openjdk.jmh:jmh-core:jar:1.27 in the shaded jar.
[INFO] Including net.sf.jopt-simple:jopt-simple:jar:4.6 in the shaded jar.
[INFO] Including org.apache.commons:commons-math3:jar:3.2 in the shaded jar.
[INFO] Replacing /home/alejandro/jRAPL/tests/jmh/native-related-runtime/target/benchmarks.jar with /home/alejandro/jRAPL/tests/jmh/native-related-runtime/target/native-related-runtime-1.0-shaded.jar
[INFO] 
[INFO] --- maven-install-plugin:2.5.1:install (default-install) @ native-related-runtime ---
[INFO] Installing /home/alejandro/jRAPL/tests/jmh/native-related-runtime/target/native-related-runtime-1.0.jar to /home/alejandro/.m2/repository/jRAPL/native-related-runtime/1.0/native-related-runtime-1.0.jar
[INFO] Installing /home/alejandro/jRAPL/tests/jmh/native-related-runtime/pom.xml to /home/alejandro/.m2/repository/jRAPL/native-related-runtime/1.0/native-related-runtime-1.0.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5.382 s
[INFO] Finished at: 2021-06-24T11:57:19-04:00
[INFO] Final Memory: 18M/240M
[INFO] ------------------------------------------------------------------------
========================================
  Copying all files from  to   
========================================
 inflated: META-INF/MANIFEST.MF
  created: META-INF/
  created: native/
  created: jRAPL/
  created: META-INF/maven/
  created: META-INF/maven/jRAPL/
  created: META-INF/maven/jRAPL/jRAPL/
 inflated: native/libJNIRAPL.so
 inflated: jRAPL/AsyncEnergyMonitorJavaSide.class
 inflated: jRAPL/NativeUtils.class
 inflated: jRAPL/DvfsEnergyController.class
 inflated: jRAPL/DriverTmp.class
 inflated: jRAPL/SyncEnergyMonitor.class
 inflated: jRAPL/PowercapEnergyController.class
 inflated: jRAPL/EnergyMonitor.class
 inflated: jRAPL/ArchSpec.class
 inflated: jRAPL/Utils.class
 inflated: jRAPL/AsyncEnergyMonitor.class
 inflated: jRAPL/EnergyManager.class
 inflated: jRAPL/EnergySample.class
 inflated: jRAPL/EnergyStats.class
 inflated: jRAPL/AsyncEnergyMonitorCSide.class
 inflated: jRAPL/EnergyDiff.class
 inflated: jRAPL/EnergyController.class
 inflated: META-INF/maven/jRAPL/jRAPL/pom.xml
 inflated: META-INF/maven/jRAPL/jRAPL/pom.properties
adding: jRAPL/(in = 0) (out= 0)(stored 0%)
adding: jRAPL/AsyncEnergyMonitorJavaSide.class(in = 4672) (out= 2308)(deflated 50%)
adding: jRAPL/NativeUtils.class(in = 4150) (out= 2232)(deflated 46%)
adding: jRAPL/DvfsEnergyController.class(in = 403) (out= 276)(deflated 31%)
adding: jRAPL/DriverTmp.class(in = 2488) (out= 1441)(deflated 42%)
adding: jRAPL/SyncEnergyMonitor.class(in = 3374) (out= 1774)(deflated 47%)
adding: jRAPL/PowercapEnergyController.class(in = 517) (out= 310)(deflated 40%)
adding: jRAPL/EnergyMonitor.class(in = 494) (out= 275)(deflated 44%)
adding: jRAPL/ArchSpec.class(in = 3480) (out= 1944)(deflated 44%)
adding: jRAPL/Utils.class(in = 4026) (out= 2004)(deflated 50%)
adding: jRAPL/AsyncEnergyMonitor.class(in = 6846) (out= 3533)(deflated 48%)
adding: jRAPL/EnergyManager.class(in = 2458) (out= 1289)(deflated 47%)
adding: jRAPL/EnergySample.class(in = 3775) (out= 1761)(deflated 53%)
adding: jRAPL/EnergyStats.class(in = 1769) (out= 871)(deflated 50%)
adding: jRAPL/AsyncEnergyMonitorCSide.class(in = 3972) (out= 1906)(deflated 52%)
adding: jRAPL/EnergyDiff.class(in = 2179) (out= 1060)(deflated 51%)
adding: jRAPL/EnergyController.class(in = 288) (out= 208)(deflated 27%)
adding: native/(in = 0) (out= 0)(stored 0%)
adding: native/libJNIRAPL.so(in = 144032) (out= 50063)(deflated 65%)
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/alejandro/jRAPL/tests/jmh/native-related-runtime/target/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.27
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/java-11-oracle/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: jRAPL.CSideCalls.timeEnergyStatCheck

# Run progress: 0.00% complete, ETA 00:04:00
# Fork: 1 of 1
# Warmup Iteration   1: 45.560 us/op
Iteration   1: 45.415 us/op
Iteration   2: 45.604 us/op
Iteration   3: Successfully wrote to the file.
45.710 us/op


Result "jRAPL.CSideCalls.timeEnergyStatCheck":
  45.576 ±(99.9%) 2.729 us/op [Average]
  (min, avg, max) = (45.415, 45.576, 45.710), stdev = 0.150
  CI (99.9%): [42.847, 48.305] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/java-11-oracle/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: jRAPL.JavaSideCalls.timeEnergyStatCheck

# Run progress: 16.67% complete, ETA 00:03:23
# Fork: 1 of 1
# Warmup Iteration   1: 73.435 us/op
Iteration   1: 74.771 us/op
Iteration   2: 74.451 us/op
Iteration   3: Successfully wrote to the file
75.309 us/op


Result "jRAPL.JavaSideCalls.timeEnergyStatCheck":
  74.843 ±(99.9%) 7.903 us/op [Average]
  (min, avg, max) = (74.451, 74.843, 75.309), stdev = 0.433
  CI (99.9%): [66.940, 82.747] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/java-11-oracle/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: jRAPL.ReadMSR.timeReadCORE

# Run progress: 33.33% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 9.354 us/op
Iteration   1: 9.818 us/op
Iteration   2: 9.833 us/op
Iteration   3: Successfully wrote to the file.
Successfully wrote to the file.
9.849 us/op


Result "jRAPL.ReadMSR.timeReadCORE":
  9.833 ±(99.9%) 0.284 us/op [Average]
  (min, avg, max) = (9.818, 9.833, 9.849), stdev = 0.016
  CI (99.9%): [9.549, 10.117] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/java-11-oracle/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: jRAPL.ReadMSR.timeReadDRAM

# Run progress: 50.00% complete, ETA 00:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 9.327 us/op
Iteration   1: 9.780 us/op
Iteration   2: 9.791 us/op
Iteration   3: Successfully wrote to the file.
Successfully wrote to the file.
9.501 us/op


Result "jRAPL.ReadMSR.timeReadDRAM":
  9.691 ±(99.9%) 2.999 us/op [Average]
  (min, avg, max) = (9.501, 9.691, 9.791), stdev = 0.164
  CI (99.9%): [6.692, 12.689] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/java-11-oracle/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: jRAPL.ReadMSR.timeReadGPU

# Run progress: 66.67% complete, ETA 00:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.919 us/op
Iteration   1: 1.035 us/op
Iteration   2: 1.008 us/op
Iteration   3: Successfully wrote to the file.
Successfully wrote to the file.
1.016 us/op


Result "jRAPL.ReadMSR.timeReadGPU":
  1.020 ±(99.9%) 0.261 us/op [Average]
  (min, avg, max) = (1.008, 1.020, 1.035), stdev = 0.014
  CI (99.9%): [0.758, 1.281] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/java-11-oracle/bin/java
# VM options: <none>
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: jRAPL.ReadMSR.timeReadPKG

# Run progress: 83.33% complete, ETA 00:00:40
# Fork: 1 of 1
# Warmup Iteration   1: 9.241 us/op
Iteration   1: 9.677 us/op
Iteration   2: 9.704 us/op
Iteration   3: Successfully wrote to the file.
Successfully wrote to the file.
9.740 us/op


Result "jRAPL.ReadMSR.timeReadPKG":
  9.707 ±(99.9%) 0.582 us/op [Average]
  (min, avg, max) = (9.677, 9.707, 9.740), stdev = 0.032
  CI (99.9%): [9.125, 10.289] (assumes normal distribution)


# Run complete. Total time: 00:04:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt   Score   Error  Units
jRAPL.CSideCalls.timeEnergyStatCheck     avgt    3  45.576 ± 2.729  us/op
jRAPL.JavaSideCalls.timeEnergyStatCheck  avgt    3  74.843 ± 7.903  us/op
jRAPL.ReadMSR.timeReadCORE               avgt    3   9.833 ± 0.284  us/op
jRAPL.ReadMSR.timeReadDRAM               avgt    3   9.691 ± 2.999  us/op
jRAPL.ReadMSR.timeReadGPU                avgt    3   1.020 ± 0.261  us/op
jRAPL.ReadMSR.timeReadPKG                avgt    3   9.707 ± 0.582  us/op
>> jmh done, now analyzing results
No handles with labels found to put in legend.
No handles with labels found to put in legend.
No handles with labels found to put in legend.
No handles with labels found to put in legend.
No handles with labels found to put in legend.
No handles with labels found to put in legend.
