A comparison of how often a thread goes in Java, or in C called by the JNI.

Two programs that are procedurally equivalent, ie they do the same thing, minus the
implementation differences that happen in C and Java.

Spawn a thread with start() which sleeps for 1 msec, increments a counter, and repeats
until the main thread calls stop() which stops the read and prints the counter, ie how
many loops were done. The time between start and stop is controlled by Java Thread.sleep()-ing
for an amount of milliseconds decided by command line argument.

This is the same conceptual model as my AsyncEnergyMonnitor, except instead of getting and
storing energy readings, it just increments a counter, to simulate how many samples are taken
in a given time frame.

If the sampling rate is nonzero, then there is a similar count for both C and Java. If it
is zero, then the Java count is way higher. I am not sure why this is. Luckily, for the
purposes of jRAPL's AsyncEnergyMonitor, a zero sampling rate, (or any sub-millisecond sampling
rate) is pointless because the MSRs only update every one millisecond. Finer granularity would
just be a waste of effort and memory to store the samples.
